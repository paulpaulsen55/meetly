{
  "name": "meetly",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "981ad22c-97a6-4f32-a0d9-c8e70cebcdb4",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e22f8f2c-8336-42df-868e-4c7520c99ec4",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -400,
        540
      ],
      "webhookId": "981ad22c-97a6-4f32-a0d9-c8e70cebcdb4"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "0516eda3-224c-479b-bbd2-ba8d814e3d19",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1000,
        500
      ]
    },
    {
      "parameters": {},
      "id": "c5f62aa8-a2c3-4769-862c-c0fc99eb946c",
      "name": "Data",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        480,
        160
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d23dcfe6-87e4-4dad-b9cc-c1bbb52291eb",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "7e1e356e-1ffc-4ffe-8643-4735f4e256f2",
              "name": "chatInput",
              "value": "={{ $ifEmpty($('Webhook').item.json.body.message, \"\") }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "includeBinary": true
        }
      },
      "id": "18e71808-6265-4f0b-b1a1-1ebadae78615",
      "name": "Set with SessionId",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        260,
        60
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d23dcfe6-87e4-4dad-b9cc-c1bbb52291eb",
              "name": "sessionId",
              "value": "={{(+new Date).toString(36).slice(-5) + Math.random().toString(36).substr(2, 5)}}",
              "type": "string"
            },
            {
              "id": "90072504-b82a-4514-93ec-7d907397361c",
              "name": "chatInput",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "37912f81-f5e8-4216-85f5-cdf506dcbb0e",
      "name": "Set with GeneratedID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        260,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "a7b94cfd-bd75-4a87-82f2-d903129bd236",
              "leftValue": "={{ $('Webhook')..json.body.sessionId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "298a92f2-4b11-4165-90a6-c33ff7dcc7b9",
      "name": "If has SessionId",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        40,
        140
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7239f277-ae85-490c-8c4d-9fca5464d416",
              "name": "message",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        680
      ],
      "id": "1f7fac0d-68c4-405b-9ea9-a9c8f107edd7",
      "name": "Set text message"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.message }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "c9e40ed9-e17a-499f-a5a6-963c01d5c796"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9b3bc32d-e2eb-45a0-a95d-2c8b2b1e57f1",
                    "leftValue": "={{ $ifEmpty($('Webhook').item.binary.audio, \"\") }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": "={{ true }}",
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -180,
        540
      ],
      "id": "4c6a4d42-bfcd-4a60-a0a7-77b79ddc82c3",
      "name": "Switch text/audio",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        20,
        680
      ],
      "id": "8c1c81ec-851d-47bc-8b04-eef96790927f",
      "name": "OpenAI whisper",
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false,
      "credentials": {
        "openAiApi": {
          "id": "TuWO0oBtdBZNgUWt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42ccbfaf-36f2-4787-b191-449936be458f",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        520
      ],
      "id": "0c19ea30-f558-498f-96f0-fb147f7124d8",
      "name": "Set text message1"
    },
    {
      "parameters": {
        "content": "## Buffered memory sessionId",
        "height": 400,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ae982a60-a879-4780-b8ae-7432a9cb092d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a helpful assistant. Extract event information from user input and return it in JSON format.\n\nIMPORTANT RULES:\n1. ALWAYS return a valid JSON with \"date\" and \"title\" fields\n2. For the \"date\" field:\n   - If the input contains natural language date references like \"morgen\", \"heute\", \"tomorrow\", \"today\", etc., provide them in the \"date\" field of the JSON response\n3. If no date is provided insert \"today\" in the \"date\" field of the JSON response\n4. For the \"title\" field:\n   - Extract the main event description after removing any date references\n   - If only date is provided without a title, use \"Untitled event\" as the title\n\nExamples:\n- Input: \"morgen gehe ich kacken\"\n  Output: {\"date\": \"Morgen\", \"title\": \"Kacken\"}\n- Input: \"heute habe ich ein meeting\"\n  Output: {\"date\": \"Heute\", \"title\": \"Meeting\"}\n- Input: \"dieter treffe ich am montag\"\n  Output: {\"date\": \"Montag\", \"title\": \"Treffen mit Dieter\"}\n\nDo not include explanations in your response, ONLY return the JSON object."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        520,
        520
      ],
      "id": "9568f2e0-8135-4dff-ae80-5132c125bd0c",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        520,
        700
      ],
      "id": "7b27bdb2-c095-4890-95f7-0a7979723d6c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "tsLt2EAunLVpYPml",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        660,
        740
      ],
      "id": "d232353c-dc89-48df-b781-13053f32687c",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"date\": \"\",\n\t\"title\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        860,
        900
      ],
      "id": "d8520a06-6f39-49f0-ae37-2573315a14e5",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        680,
        900
      ],
      "id": "19d5d0cf-2021-4e49-80a2-213ff60fc7c7",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "tsLt2EAunLVpYPml",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        320,
        520
      ],
      "id": "9924fbf8-03b5-40e4-945c-86bee5f7f39d",
      "name": "message1"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch text/audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set with SessionId": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set with GeneratedID": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If has SessionId": {
      "main": [
        [
          {
            "node": "Set with SessionId",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set with GeneratedID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text message": {
      "main": [
        [
          {
            "node": "message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch text/audio": {
      "main": [
        [
          {
            "node": "Set text message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI whisper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI whisper": {
      "main": [
        [
          {
            "node": "Set text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text message1": {
      "main": [
        [
          {
            "node": "message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "message1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "239bd4f9-1084-4b3f-899f-4533b857a11d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0efefaf848cb55b47d610315256d7fa8b63f4f8843777a47ca589bc607a113a5"
  },
  "id": "T5zb3UkO3cdcS6tN",
  "tags": []
}