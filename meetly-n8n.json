{
  "name": "meetly",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "981ad22c-97a6-4f32-a0d9-c8e70cebcdb4",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "20c76add-86a8-4757-ba0b-ed1ece090c30",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -400,
        540
      ],
      "webhookId": "981ad22c-97a6-4f32-a0d9-c8e70cebcdb4"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "0d5ff21a-e4d7-43c2-9e03-c1ab23454ef4",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1000,
        500
      ]
    },
    {
      "parameters": {},
      "id": "d37666cf-f9df-4946-b65b-4942c4d0f96d",
      "name": "Data",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        480,
        160
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d23dcfe6-87e4-4dad-b9cc-c1bbb52291eb",
              "name": "sessionId",
              "value": "={{ $json.body.sessionId }}",
              "type": "string"
            },
            {
              "id": "7e1e356e-1ffc-4ffe-8643-4735f4e256f2",
              "name": "chatInput",
              "value": "={{ $ifEmpty($('Webhook').item.json.body.message, \"\") }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "includeBinary": true
        }
      },
      "id": "d5c99d29-0661-4dc7-aea7-0f5c01c80763",
      "name": "Set with SessionId",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        260,
        60
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d23dcfe6-87e4-4dad-b9cc-c1bbb52291eb",
              "name": "sessionId",
              "value": "={{(+new Date).toString(36).slice(-5) + Math.random().toString(36).substr(2, 5)}}",
              "type": "string"
            },
            {
              "id": "90072504-b82a-4514-93ec-7d907397361c",
              "name": "chatInput",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3dd71e8b-b064-41e3-a6ae-6677902ca9d5",
      "name": "Set with GeneratedID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        260,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "a7b94cfd-bd75-4a87-82f2-d903129bd236",
              "leftValue": "={{ $('Webhook')..json.body.sessionId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "407a99fe-8456-473a-aa03-0f7c0c84b424",
      "name": "If has SessionId",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        40,
        140
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7239f277-ae85-490c-8c4d-9fca5464d416",
              "name": "message",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        680
      ],
      "id": "6ed25118-6cb6-4aa6-a33e-39e0bce9c4ce",
      "name": "Set text message"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.message }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "c9e40ed9-e17a-499f-a5a6-963c01d5c796"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9b3bc32d-e2eb-45a0-a95d-2c8b2b1e57f1",
                    "leftValue": "={{ $ifEmpty($('Webhook').item.binary.audio, \"\") }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": "={{ true }}",
              "outputKey": "audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -180,
        540
      ],
      "id": "99a66b4a-1366-4c74-8d92-399d0873b7d9",
      "name": "Switch text/audio",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "=audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        20,
        680
      ],
      "id": "bb630cc4-af52-401e-bb94-933f3d05a283",
      "name": "OpenAI whisper",
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false,
      "credentials": {
        "openAiApi": {
          "id": "P7uF65mOoext6ato",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42ccbfaf-36f2-4787-b191-449936be458f",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        520
      ],
      "id": "baf83335-36a4-440a-9717-4b65a5a044ff",
      "name": "Set text message1"
    },
    {
      "parameters": {
        "content": "## Buffered memory sessionId",
        "height": 400,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "12ca3bed-7085-4e09-86f7-cae0916212c2",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a helpful assistant. Extract event information from user input and return it in JSON format.\n\nIMPORTANT RULES:\n1. ALWAYS return a valid JSON with \"date\" and \"title\" fields\n2. For the \"date\" field:\n   - If the input contains natural language date references like \"morgen\", \"heute\", \"tomorrow\", \"today\", etc., provide them in the \"date\" field of the JSON response\n3. For the \"title\" field:\n   - Extract the main event description after removing any date references\n   - If only date is provided without a title, use \"Untitled event\" as the title\n\nExamples:\n- Input: \"morgen kacken\"\n  Output: {\"date\": \"morgen\", \"title\": \"kacken\"}\n- Input: \"heute meeting\"\n  Output: {\"date\": \"heute\", \"title\": \"meeting\"}\n- Input: \"montag zum arzt\"\n  Output: {\"date\": \"montag\", \"title\": \"zum arzt\"}\n\nDo not include explanations in your response, ONLY return the JSON object."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        520,
        520
      ],
      "id": "b6e48fd6-9cd7-4547-a035-7d0bf07584e2",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        520,
        700
      ],
      "id": "a4790590-a0b8-4e45-8cf9-55f40cf1dc94",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "Ypd5RzDJLM0Lfh4B",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        660,
        740
      ],
      "id": "be9c0950-9f8f-42cc-b64a-067645a2fc67",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"date\": \"\",\n\t\"title\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        860,
        900
      ],
      "id": "bb94cec8-960c-4587-aa59-072574682c81",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        680,
        900
      ],
      "id": "de77699a-a27b-48ca-9cd7-e184f448b43a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "Ypd5RzDJLM0Lfh4B",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        320,
        520
      ],
      "id": "6599efba-8dc9-454e-a5cb-21a9df7802d3",
      "name": "message1"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch text/audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set with SessionId": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set with GeneratedID": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If has SessionId": {
      "main": [
        [
          {
            "node": "Set with SessionId",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set with GeneratedID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text message": {
      "main": [
        [
          {
            "node": "message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch text/audio": {
      "main": [
        [
          {
            "node": "Set text message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI whisper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI whisper": {
      "main": [
        [
          {
            "node": "Set text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set text message1": {
      "main": [
        [
          {
            "node": "message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "message1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5683abb4-5c08-424b-8b0f-48150d7e8e72",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e5c5ecb57167cbf8b7392edbac5a75daf8247bfb13362c335453bb1e5c29a4cf"
  },
  "id": "GUr11iTYcUxHpTc2",
  "tags": []
}